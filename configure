#!/bin/bash
# Anticonf (tm) script by Jeroen Ooms (2016)
# This script will query 'pkg-config' for the required cflags and ldflags.
# If pkg-config is unavailable or does not find the library, try setting
# INCLUDE_DIR and LIB_DIR manually via e.g:
# R CMD INSTALL --configure-vars='INCLUDE_DIR=/.../include LIB_DIR=/.../lib'

# Library settings
PKG_CONFIG_NAME="protobuf"
PKG_DEB_NAME="libprotobuf-dev"
PKG_RPM_NAME="protobuf-devel"
PKG_CSW_NAME="protobuf_gxx_dev"
PKG_BREW_NAME="protobuf"
PKG_TEST_HEADER="<google/protobuf/message.h>"
PKG_LIBS="-lprotobuf"
PKG_CFLAGS=""

# Use pkg-config if available
if [ $(command -v pkg-config) ]; then
  PKGCONFIG_CFLAGS=$(pkg-config --cflags --silence-errors ${PKG_CONFIG_NAME})
  PKGCONFIG_LIBS=$(pkg-config --libs ${PKG_CONFIG_NAME})
  PKGCONFIG_MODVERSION=$(pkg-config --modversion --silence-errors ${PKG_CONFIG_NAME})
fi

# Note that cflags may be empty in case of success
if [ "$INCLUDE_DIR" ] || [ "$LIB_DIR" ]; then
  echo "Found INCLUDE_DIR and/or LIB_DIR!"
  PKG_CFLAGS="-I$INCLUDE_DIR $PKG_CFLAGS"
  PKG_LIBS="-L$LIB_DIR $PKG_LIBS"
elif [ "$PKGCONFIG_CFLAGS" ] || [ "$PKGCONFIG_LIBS" ]; then
  echo "Found pkg-config cflags and libs!"
  PKG_CFLAGS=${PKGCONFIG_CFLAGS}
  PKG_LIBS=${PKGCONFIG_LIBS}
elif [[ "$OSTYPE" == "darwin"* ]]; then
  if [ $(command -v brew) ]; then
    BREWDIR=$(brew --prefix)
  else
    echo "Auto-brewing $PKG_BREW_NAME..."
    BREWDIR="/tmp/homebrew"
    rm -Rf $BREWDIR
    mkdir -p $BREWDIR
    curl -fsSL https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C $BREWDIR
    HOMEBREW_CACHE="/tmp" $BREWDIR/bin/brew install --force-bottle $PKG_BREW_NAME 2>&1 | sed 's/Warning/Note/g'
    DELDYN=TRUE
  fi
  PATH="$BREWDIR/opt/$PKG_BREW_NAME/bin:$PATH"
  PKG_CFLAGS="-I$BREWDIR/opt/$PKG_BREW_NAME/include"
  PKG_LIBS="-L$BREWDIR/opt/$PKG_BREW_NAME/lib $PKG_LIBS"
fi

# For debugging
echo "Using PKG_CFLAGS=$PKG_CFLAGS"
echo "Using PKG_LIBS=$PKG_LIBS"

# Find compiler
CXXCPP=$(${R_HOME}/bin/R CMD config CXXCPP)
CXXFLAGS=$(${R_HOME}/bin/R CMD config CXXFLAGS)
CPPFLAGS=$(${R_HOME}/bin/R CMD config CPPFLAGS)

# Test configuration
echo "#include $PKG_TEST_HEADER" | ${CXXCPP} ${CPPFLAGS} ${PKG_CFLAGS} ${CXXFLAGS} -xc++ - >/dev/null 2>&1

# Customize the error
if [ $? -ne 0 ]; then
  echo "------------------------- ANTICONF ERROR ---------------------------"
  echo "Configuration failed because $PKG_CONFIG_NAME was not found. Try installing:"
  echo " * deb: $PKG_DEB_NAME (Debian, Ubuntu, etc)"
  echo " * rpm: $PKG_RPM_NAME (Fedora, EPEL)"
  echo " * csw: $PKG_CSW_NAME (Solaris)"
  echo " * brew: $PKG_BREW_NAME (OSX)"
  echo "If $PKG_CONFIG_NAME is already installed, check that 'pkg-config' is in your"
  echo "PATH and PKG_CONFIG_PATH contains a $PKG_CONFIG_NAME.pc file. If pkg-config"
  echo "is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:"
  echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
  echo "--------------------------------------------------------------------"
  exit 1;
fi

# Write to Makevars
sed -e "s|@cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" src/Makevars.in > src/Makevars

# Look for 'protoc' compiler
if [ $(command -v protoc) ]; then
  PROTOC_VERSION=$(protoc --version)
  echo "Using ${PROTOC_VERSION} from $(command -v protoc)"
else
  echo "Failed to run protoc."
  echo "Please install the 'protobuf-compiler' package for your system."
  exit 1
fi

# Try to check if protoc version matches libproto
if [[ $PROTOC_VERSION != *"$PKGCONFIG_MODVERSION"* ]]; then
  echo "Warning: protoc version $PROTOC_VERSION might not match libproto version $PKGCONFIG_MODVERSION.";
fi

# Compile proto file
cd src
protoc rexp.proto --cpp_out=.
if [ $? -ne 0 ]; then
  echo "Error: failed to compile rexp.proto file."
  exit 1
fi

# Delayed delete because dynlib is needed by protoc above
if [ "$DELDYN" ]; then
  rm -f $BREWDIR/opt/$PKG_BREW_NAME/lib/*.dylib
fi

# Success
exit 0
